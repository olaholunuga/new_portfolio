from flask import Blueprint, request, jsonify, session
from datetime import datetime
import json
from agents import TechnicalAgent
from utils.email_handler import send_email
import logging

logger = logging.getLogger(__name__)

proposal_bp = Blueprint("proposal", __name__)

@proposal_bp.route("/api/generate_proposal", methods=["POST"])
def generate_proposal():
    try:
        data = request.get_json()
        name = data.get("name")
        email = data.get("email")
        requirements = data.get("requirements")
        timeline = data.get("timeline")
        budget = data.get("budget")
        visitor_info = data.get("visitor_info", {})
        title = data.get("title")
        if not visitor_info:
            visitor_info = session.get("visitor_type", "client or employer")
        
        logger.error(str(data))
        if not (email and name and title and requirements):
            return jsonify({"Error": "Missing required fields"}), 400
        
        technical_agent = technical_agent()
        proposal_prompt = f"""
        Generate a professional project proposal based on the requirements and other details:
        REQUIREMENTS: {requirements}
        CLIENT INFOs:
            type: {visitor_info}
            title: {title}
            timeline: {timeline}
            budget: {budget}
        
        Include:
        1. Project Overview
        2. Technical Approach
        3. Recommended Tech Stack
        4. Timeline Estimate
        5. Key Deliverable
        6. Next Steps
        """

        proposal = technical_agent.get_response(proposal_prompt)

        # Email to me
        send_email(
            to="olaholunga@gmail.com",
            subject=f"New Project Proposal Request from {name}",
            template_name="email_proposal_owner.html",
            context={
                "name": name,
                "email": email,
                "title": title,
                "budget": budget,
                "timeline": timeline,
                "requirements": requirements,
                "proposal": proposal,
                "disclaimer": "This proposal is generated by AI for experimental purposes only. It does not constitute a formal business agreement."
            },
        )

        # Email to client
        send_email(
            to=email,
            subject="Your Project Proposal Preview",
            template_name="email_proposal_client.html",
            context={
                "title": title,
                "budget": budget,
                "timeline": timeline,
                "requirements": requirements,
                "proposal": proposal,
                "disclaimer": "This proposal is generated by AI for experimental purposes only. It does not constitute a formal business agreement."
            },
        )

        return jsonify({
            "proposal": proposal,
            "generated_at": datetime.now().isoformat()
        }), 200
    except Exception as e:
        return jsonify({"Error": str(e)}), 500